import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

//https://www.pgyer.com/doc/view/api#uploadApp
ext {
    api_key = "37a40d3a5e9480169aefe5f7b4e854da"
    user_key = "8df05dc4980b0b7418a439b0722aa63b"
    upload_url = "https://www.pgyer.com/apiv2/app/upload"

    // Apk输出路劲
    apk_path = "${project.rootDir}/app/build/outputs/apk/"
    debug_apk_path = "${project.rootDir}/app/build/outputs/apk/debug/玩Android/"
    release_apk_path = "${project.rootDir}/app/build/outputs/apk/release/玩Android/"

    //更新文案
    version_description = "测试声音复刻"
}

static def isOpenWeChatMsg() {
    return false
}

/**
 * 注释：打包Debug包并上传蒲公英
 */
task pgyerBuildDebug() {
    group 'pgyer'
    dependsOn('app:assembleDebug')
    doLast {
        def apkDir = new File(debug_apk_path)
        if (!apkDir.exists()) {
            throw new RuntimeException("apk output path not exists!")
        }
        def apk = null
        for (int i = apkDir.listFiles().length - 1; i >= 0; i--) {
            File file = apkDir.listFiles()[i]
            if (file.name.endsWith(".apk")) {
                apk = file
                break
            }
        }
        if (apk == null) {
            throw new RuntimeException("apk file not exists!")
        }
        uploadApp(apk, "[Debug]${version_description}")
    }
}

/**
 * 注释：打包Release并上传蒲公英
 */
task pgyerBuildRelease() {
    group 'pgyer'
    dependsOn('app:assembleRelease')
    doLast {
        def apkDir = new File(release_apk_path)
        if (!apkDir.exists()) {
            throw new RuntimeException("apk output path not exists!")
        }
        def apk = null
        for (int i = apkDir.listFiles().length - 1; i >= 0; i--) {
            File file = apkDir.listFiles()[i]
            if (file.name.endsWith(".apk")) {
                apk = file
                break
            }
        }
        if (apk == null) {
            throw new RuntimeException("apk file not exists!")
        }
        uploadApp(apk, "[Release]${version_description}")
    }
}

/**
 * 注释：获取Git分支
 */
def loadGitBranch() {
    def config = file("${project.rootDir}/.git/HEAD")
    String content = ""
    config.eachLine { line ->
        content = line
    }
    return content.replaceAll("ref: refs/heads/", "")
}

/**
 * 注释：删除apk输出文件夹
 */
task deleteApkPath() {
    doLast {
        delete apk_path
        println("*******************APK输出目录已删除***********************")
    }
}

/**
 * 注释：打包Task任务依赖注入deleteApkPath
 */
project.tasks.whenTaskAdded { Task currentTask ->
    if (currentTask.name == "assembleDebug" || currentTask.name == "assembleRelease") {
        currentTask.dependsOn('deleteApkPath')
        currentTask.mustRunAfter('deleteApkPath')
    }
}


/**
 * 注释：上传App至蒲公英
 */
def uploadApp(File file, String description) {
    def out = new ByteArrayOutputStream()
    exec {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ExecSpec execSpec = commandLine "cmd", "/c", "curl -F _api_key=${api_key} -F file=@${file.absolutePath} -F buildUpdateDescription=${description} ${upload_url}"
            execSpec.standardOutput = out
        } else {
            ExecSpec execSpec = commandLine "bash", "-c", "curl -F _api_key=${api_key} -F file=@${file.absolutePath} -F buildUpdateDescription=${description} ${upload_url}"
            execSpec.standardOutput = out
        }
    }
    println("蒲公英上传结果：\n${out.toString()}")
    def uploadResult = new JsonSlurper().parseText(out.toString())
    if (uploadResult.code == 0) {
        if (isOpenWeChatMsg()) {
            sendMsgToWeChat(getFileSize(file), uploadResult.data)
        } else {
            sendMsgToDing(getFileSize(file), uploadResult.data)
        }

    } else {
        println("蒲公英上传失败原因:${uploadResult.message}")
    }
}

/**
 * 注释：获取文件大小
 * @param file
 */
static def getFileSize(File file) {
    long size = file.size()
    if (size < 1024) {
        return "${new BigDecimal(size).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue()}B"
    } else if (size < 1024 * 1024) {
        return "${new BigDecimal(size / 1024).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue()}KB"
    } else if (size < 1024 * 1024 * 1024) {
        return "${new BigDecimal(size / 1024 / 1024).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue()}MB"
    }
}

/**
 * 注释：发送钉钉通知
 * @param data
 * @return
 */
def sendMsgToDing(def fileSize, def data) {
    println("*************** 钉钉消息开始发送 ***************")

    def conn = new URL("https://oapi.dingtalk.com/robot/send?access_token=86c8e77288808b8b61b77cb4991fc874328e131e156a3415d39156c87e105562").openConnection()
    conn.setRequestMethod('POST')
    conn.setRequestProperty("Connection", "Keep-Alive")
    conn.setRequestProperty("Content-type", "application/json;charset=UTF-8")
    conn.setConnectTimeout(30000)
    conn.setReadTimeout(30000)
    conn.setDoInput(true)
    conn.setDoOutput(true)
    def dos = new DataOutputStream(conn.getOutputStream())
    def qrCodeUrl = "![](" + data.buildQRCodeURL + ")"
    def _title = "蒲公英机器人"
    def _content = new StringBuffer()
    _content.append("\n\n### android构建成功,已上传蒲公英")
    _content.append("\n\n**构建应用**:\n\n玩Android App")
    _content.append("\n\n**构建时间**:\n\n${data.buildUpdated}")
    _content.append("\n\n**构建描述**:\n\n${data.buildUpdateDescription}")
    _content.append("\n\n**蒲公英版本号**:\n\nbuild${data.buildBuildVersion}")
    _content.append("\n\n**Android包大小**:\n\n${fileSize}")
    _content.append("\n\n**Android版本号**:\n\n${data.buildVersion}")
    _content.append("\n\n**Git分支**:\n\n${loadGitBranch()}")
    _content.append("\n\n**下载地址**:\n\nhttps://www.pgyer.com/${data.buildKey}")
    //_content.append("\n\n**安装密码**:\n\ncarzone123")
    _content.append("\n\n" + qrCodeUrl)
    def json = new JsonBuilder()
    json {
        msgtype "markdown"
        markdown {
            title _title
            text _content.toString()
        }
        at {
            isAtAll true
        }
    }
    dos.writeBytes(json.toString())
    def input = new BufferedReader(new InputStreamReader(conn.getInputStream()))
    String line = ""
    String result = ""
    while ((line = input.readLine()) != null) {
        result += line
    }
    dos.flush()
    dos.close()
    input.close()
    conn.connect()
    println("钉钉发送通知结果:\n${result}")

    println("*************** 钉钉消息已发送 ***************")
}

def sendMsgToWeChat(def fileSize, def data) {
    println("*************** 企业微信消息开始发送 ***************")

    def conn = new URL("https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=8cd7442f-480d-4160-895d-fde121bb7117").openConnection()
    conn.setRequestMethod('POST')
    conn.setRequestProperty("Connection", "Keep-Alive")
    conn.setRequestProperty("Content-type", "application/json;charset=UTF-8")
    conn.setConnectTimeout(30000)
    conn.setReadTimeout(30000)
    conn.setDoInput(true)
    conn.setDoOutput(true)
    def dos = new DataOutputStream(conn.getOutputStream())
    def _title = "蒲公英机器人"
    def _content = new StringBuffer()
    _content.append("\n\n### Android构建成功,已上传蒲公英")
    _content.append("\n\n**构建应用**:\n\n玩Android App")
    _content.append("\n\n**构建时间**:\n\n${data.buildUpdated}")
    _content.append("\n\n**构建描述**:\n\n${data.buildUpdateDescription}")
    _content.append("\n\n**蒲公英版本号**:\n\nbuild${data.buildBuildVersion}")
    _content.append("\n\n**Android包大小**:\n\n${fileSize}")
    _content.append("\n\n**Android版本号**:\n\n${data.buildVersion}")
    _content.append("\n\n**Git分支**:\n\n${loadGitBranch()}")
    _content.append("\n\n**下载地址**:\n\n[https://www.pgyer.com/${data.buildKey}](https://www.pgyer.com/${data.buildKey})")
    //_content.append("\n\n**安装密码**:\n\ncarzone123")
    def qrCodeUrl = "![image](${data.buildQRCodeURL})"
    _content.append("\n\n" + qrCodeUrl)
    def json = new JsonBuilder()
    json {
        msgtype "markdown"
        markdown {
            title _title
            content _content.toString()
        }
        at {
            isAtAll true
        }
    }
    println(json.toString())
    dos.writeBytes(json.toString())
    dos.flush()
    dos.close()
    conn.connect()
    def result = conn.getContent().text
    println(result)
    println("*************** 企业微信消息已发送 ***************")
}
